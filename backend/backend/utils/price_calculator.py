"""
Price Calculator - ÌåêÎß§Í∞Ä Î∞è Î∞∞ÏÜ°ÎπÑ ÏûêÎèô Í≥ÑÏÇ∞
Ï§ëÍµ≠ Î∞∞ÏÜ°ÎåÄÌñâÎπÑ, ÌôòÏú®, ÎßàÏßÑÏùÑ Í≥†Î†§Ìïú ÏµúÏ¢Ö ÌåêÎß§Í∞Ä ÏÇ∞Ï∂ú
"""
import os
import logging
import requests
from typing import Dict, Any, Optional

logger = logging.getLogger(__name__)


class ShippingCalculator:
    """Ï§ëÍµ≠ Î∞∞ÏÜ°ÎåÄÌñâÎπÑ ÏûêÎèô Í≥ÑÏÇ∞"""

    # Î¨¥Í≤å Í∏∞Î∞ò Î∞∞ÏÜ°ÎπÑ ÌÖåÏù¥Î∏î (kg: Ïõê)
    WEIGHT_BASED_RATES = {
        0.5: 5000,   # 500g Ïù¥Ìïò: 5,000Ïõê
        1.0: 7000,   # 1kg Ïù¥Ìïò: 7,000Ïõê
        2.0: 10000,  # 2kg Ïù¥Ìïò: 10,000Ïõê
        3.0: 13000,  # 3kg Ïù¥Ìïò: 13,000Ïõê
        5.0: 18000,  # 5kg Ïù¥Ìïò: 18,000Ïõê
    }

    # Î∂ÄÌîº Î¨¥Í≤å Í≥ÑÏÇ∞ (Í∞ÄÎ°ú x ÏÑ∏Î°ú x ÎÜíÏù¥ / 6000)
    VOLUME_DIVISOR = 6000

    # Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÌèâÍ∑† Î¨¥Í≤å (kg)
    CATEGORY_WEIGHTS = {
        'ÏùòÎ•ò': 0.3,
        'Ìã∞ÏÖîÏ∏†': 0.2,
        'Îß®Ìà¨Îß®': 0.4,
        'ÌõÑÎìú': 0.5,
        'ÏΩîÌä∏': 0.8,
        'Ìå®Îî©': 1.0,
        'Î∞îÏßÄ': 0.5,
        'Ïã†Î∞ú': 0.8,
        'Ïö¥ÎèôÌôî': 0.9,
        'Ïä¨Î¶¨Ìçº': 0.3,
        'Í∞ÄÎ∞©': 0.5,
        'Î∞±Ìå©': 0.7,
        'ÌÅ¨Î°úÏä§Î∞±': 0.3,
        'ÏïÖÏÑ∏ÏÑúÎ¶¨': 0.1,
        'Î™®Ïûê': 0.2,
        'Ï†ÑÏûêÏ†úÌíà': 0.5,
        'Ïù¥Ïñ¥Ìè∞': 0.1,
        'Î≥¥Ï°∞Î∞∞ÌÑ∞Î¶¨': 0.3,
        'Í∏∞ÌÉÄ': 0.5,
    }

    def calculate_shipping(
        self,
        weight_kg: Optional[float] = None,
        dimensions: Optional[Dict[str, float]] = None,
        title: str = ''
    ) -> Dict[str, Any]:
        """
        Î∞∞ÏÜ°ÎπÑ Í≥ÑÏÇ∞

        Args:
            weight_kg: Ïã§Ï†ú Î¨¥Í≤å (kg)
            dimensions: {'length': 30, 'width': 20, 'height': 10} (cm)
            title: ÏÉÅÌíàÎ™Ö (Ïπ¥ÌÖåÍ≥†Î¶¨ Ï∂îÎ°†Ïö©)

        Returns:
            {
                'shipping_fee': 7000,
                'weight_used': 0.8,
                'actual_weight': 0.8,
                'volume_weight': None,
                'calculation_method': 'actual_weight',
                'estimated': True
            }
        """
        try:
            estimated = False

            # 1. Î¨¥Í≤å Ï∂îÏ†ï (ÏóÜÏùÑ Í≤ΩÏö∞ Ï†úÎ™©ÏóêÏÑú Ïπ¥ÌÖåÍ≥†Î¶¨ Ï∂îÎ°†)
            if not weight_kg:
                weight_kg = self._estimate_weight_from_title(title)
                estimated = True

            # 2. Î∂ÄÌîº Î¨¥Í≤å Í≥ÑÏÇ∞
            volume_weight = None
            if dimensions:
                volume = (
                    dimensions['length'] *
                    dimensions['width'] *
                    dimensions['height']
                )
                volume_weight = volume / self.VOLUME_DIVISOR

            # 3. Ïã§Ï†ú Î¨¥Í≤å vs Î∂ÄÌîº Î¨¥Í≤å Ï§ë ÌÅ∞ Í∞í ÏÇ¨Ïö©
            final_weight = max(
                weight_kg,
                volume_weight if volume_weight else 0
            )

            # 4. Î∞∞ÏÜ°ÎπÑ Ï°∞Ìöå
            shipping_fee = self._get_fee_by_weight(final_weight)

            calc_method = 'volume' if volume_weight and volume_weight > weight_kg else 'actual'
            if estimated:
                calc_method = 'estimated'

            return {
                'shipping_fee': shipping_fee,
                'weight_used': round(final_weight, 2),
                'actual_weight': round(weight_kg, 2) if weight_kg else None,
                'volume_weight': round(volume_weight, 2) if volume_weight else None,
                'calculation_method': calc_method,
                'estimated': estimated
            }

        except Exception as e:
            logger.error(f"‚ùå Shipping calculation failed: {str(e)}")
            # Return default
            return {
                'shipping_fee': 7000,
                'weight_used': 0.5,
                'calculation_method': 'default',
                'estimated': True
            }

    def _estimate_weight_from_title(self, title: str) -> float:
        """Ï†úÎ™©ÏóêÏÑú Ïπ¥ÌÖåÍ≥†Î¶¨ Ï∂îÎ°†ÌïòÏó¨ ÌèâÍ∑† Î¨¥Í≤å Î∞òÌôò"""
        title_lower = title.lower()

        for category, weight in self.CATEGORY_WEIGHTS.items():
            if category in title_lower or category in title:
                logger.info(f"   Estimated weight from title: {category} -> {weight}kg")
                return weight

        # Í∏∞Î≥∏Í∞í
        return 0.5

    def _get_fee_by_weight(self, weight_kg: float) -> int:
        """Î¨¥Í≤åÏóê Îî∞Î•∏ Î∞∞ÏÜ°ÎπÑ Ï°∞Ìöå"""
        for max_weight, fee in sorted(self.WEIGHT_BASED_RATES.items()):
            if weight_kg <= max_weight:
                return fee

        # 5kg Ï¥àÍ≥º: 1kgÎãπ 3,500Ïõê Ï∂îÍ∞Ä
        base_fee = self.WEIGHT_BASED_RATES[5.0]
        import math
        extra_kg = math.ceil(weight_kg - 5.0)
        return base_fee + (extra_kg * 3500)


class PriceCalculator:
    """ÌåêÎß§Í∞Ä ÏûêÎèô Í≥ÑÏÇ∞"""

    def __init__(self):
        self.exchange_rate = self._get_exchange_rate()
        self.shipping_calculator = ShippingCalculator()

    def calculate_selling_price(
        self,
        taobao_price_cny: float,
        title: str = '',
        target_margin: float = 0.35,
        weight_kg: Optional[float] = None
    ) -> Dict[str, Any]:
        """
        ÌåêÎß§Í∞Ä ÏûêÎèô Í≥ÑÏÇ∞

        Formula:
        ÌåêÎß§Í∞Ä = (ÌÉÄÏò§Î∞îÏò§ Í∞ÄÍ≤© * ÌôòÏú® + Î∞∞ÏÜ°ÎπÑ) / (1 - ÎßàÏßÑÏú®)

        Args:
            taobao_price_cny: ÌÉÄÏò§Î∞îÏò§ Í∞ÄÍ≤© (ÏúÑÏïà)
            title: ÏÉÅÌíàÎ™Ö (Î∞∞ÏÜ°ÎπÑ Ï∂îÏ†ïÏö©)
            target_margin: Î™©Ìëú ÎßàÏßÑÏú® (Í∏∞Î≥∏ 35%)
            weight_kg: Î¨¥Í≤å (ÏÑ†ÌÉù)

        Returns:
            {
                'taobao_price_cny': 89.0,
                'taobao_price_krw': 16900,
                'exchange_rate': 190,
                'shipping_fee': 7000,
                'total_cost': 23900,
                'target_margin': 0.35,
                'selling_price': 36770,
                'selling_price_rounded': 36900,
                'expected_profit': 13000,
                'actual_margin': 0.352
            }
        """
        try:
            # 1. ÌôòÏú® Ï†ÅÏö©
            taobao_price_krw = int(taobao_price_cny * self.exchange_rate)

            # 2. Î∞∞ÏÜ°ÎπÑ Í≥ÑÏÇ∞
            shipping_result = self.shipping_calculator.calculate_shipping(
                weight_kg=weight_kg,
                title=title
            )
            shipping_fee = shipping_result['shipping_fee']

            # 3. Ï¥ù ÏõêÍ∞Ä
            total_cost = taobao_price_krw + shipping_fee

            # 4. ÌåêÎß§Í∞Ä Í≥ÑÏÇ∞ (ÎßàÏßÑÏú® Í≥†Î†§)
            selling_price = total_cost / (1 - target_margin)

            # 5. 100Ïõê Îã®ÏúÑ Î∞òÏò¨Î¶º
            selling_price_rounded = round(selling_price / 100) * 100

            # 6. Ïã§Ï†ú ÎßàÏßÑ Í≥ÑÏÇ∞
            expected_profit = selling_price_rounded - total_cost
            actual_margin = expected_profit / selling_price_rounded if selling_price_rounded > 0 else 0

            return {
                'taobao_price_cny': taobao_price_cny,
                'taobao_price_krw': taobao_price_krw,
                'exchange_rate': self.exchange_rate,
                'shipping_fee': shipping_fee,
                'shipping_details': shipping_result,
                'total_cost': total_cost,
                'target_margin': target_margin,
                'selling_price': int(selling_price),
                'selling_price_rounded': selling_price_rounded,
                'expected_profit': expected_profit,
                'actual_margin': round(actual_margin, 3)
            }

        except Exception as e:
            logger.error(f"‚ùå Price calculation failed: {str(e)}")
            # Return default
            return {
                'taobao_price_cny': taobao_price_cny,
                'taobao_price_krw': int(taobao_price_cny * 190),
                'exchange_rate': 190,
                'shipping_fee': 7000,
                'total_cost': int(taobao_price_cny * 190) + 7000,
                'error': str(e)
            }

    def _get_exchange_rate(self) -> float:
        """
        Ïã§ÏãúÍ∞Ñ ÌôòÏú® Ï°∞Ìöå (CNY to KRW)

        API: https://api.exchangerate-api.com/v4/latest/CNY
        """
        try:
            logger.info("üîÑ Fetching CNY to KRW exchange rate...")

            response = requests.get(
                'https://api.exchangerate-api.com/v4/latest/CNY',
                timeout=5
            )
            response.raise_for_status()

            data = response.json()
            krw_rate = data['rates']['KRW']

            logger.info(f"‚úÖ Exchange rate: 1 CNY = {krw_rate:.2f} KRW")
            return krw_rate

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Exchange rate API failed, using default: {str(e)}")
            return 190.0  # Í∏∞Î≥∏Í∞í

    def batch_calculate(self, products: list) -> list:
        """
        Î∞∞Ïπò Í∞ÄÍ≤© Í≥ÑÏÇ∞

        Args:
            products: [{
                'taobao_price_cny': 89,
                'title': 'Îß®Ìà¨Îß®',
                ...
            }]

        Returns:
            Í∞ôÏùÄ Î¶¨Ïä§Ìä∏Ïóê price_info Ï∂îÍ∞Ä
        """
        results = []

        for product in products:
            price_cny = product.get('taobao_price_cny') or product.get('price', 0)
            title = product.get('title', '')

            price_info = self.calculate_selling_price(
                taobao_price_cny=price_cny,
                title=title
            )

            product['price_info'] = price_info
            results.append(product)

        return results


# Singleton instances
_price_calculator = None

def get_price_calculator() -> PriceCalculator:
    """Get singleton PriceCalculator instance"""
    global _price_calculator
    if _price_calculator is None:
        _price_calculator = PriceCalculator()
    return _price_calculator
